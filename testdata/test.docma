:fa/beer:
:grimacing:

; test comment
; ...
; ...

{title set Rommel123}
{latex.style set testdata/batman}
{authors append Adam, Michael}

[csvtable, hasHeader, hasColumnHeader]
----
"1, 2, 3", 2, 3, 4
a, b, c, d
----

NOTE: note
TIP: tip
WARNING: warning
CAUTION: caution
IMPORTANT: important
IDEA: idea
REMINDER: reminder

[important]
----
One can put any valid docma markup in an admonition block

[plantuml]
--
skinparam handwritten true
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
collections Foo6
Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
Foo1 -> Foo6 : To collections
--

----

[csvtable, separator=";"]
----
1; 2; 3; 4; 2
a, b, c, d
----

[csvtable, file="test.csv"]

is equal to 

CSVTABLE: test.csv

since ''file'' is ''csvtable''s default parameter.

[admonition, type=warning]
----
some text
----

= H1
text1 and grab a :fa/beer:

:grimacing: :rofl: :vomiting:

== H2
text2

== H2
text3

= H1
text4

== H2
text5

=== H3
text6

= H1
text7

== H2
text8

== H2
text9

=== H3
text10

= H1
te :fa/beer: xt10.5

== H2
text11

==== H4
text11.5

== H2
text12

====== H6
text12.5

=== H3
text13

==== H4
text14

=== H3
text15

== H2
text16

=== H3
text17

== H2
text18

= H1
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Text is here

text with << anchor >> link

text with << anchor, blubb blubb blubb >> link and text

== H2
text with [[anchor]] anchor
test //italic// __**bold underline**__ ''mono'' --stroked--

* t0
* This text ...
    is using two lines
** t2
* t3
## asdf
## ghjk
## lmno
* t4

. An image
[image, file="test1.png"]

. [listing] A formula
[formula]
----
(a_1 / (b_1 + sqrt(c))^2) + sin(a_2 * b_2)
----

Jetzt kommt Code:
[code]
----
#include <iostream>

struct Test {
    int i;
    Test(int i) : i{i} {
        try {
            if(i<42)
                throw 42;
        } catch(..) {
            throw;
        }
    }
};

int main() {
    auto out = "test string";
    Test t0(42);
    Test t{42};
    return t.i;
}
----
Jetzt nicht mehr :)

Jetzt kommt Code:
[code]
----
<span class="hljs-keyword">TestText<br>

----
Jetzt nicht mehr :)


[include, file=included.docma]

text

[plantuml]
----
skinparam handwritten true
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
collections Foo6
Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
Foo1 -> Foo6 : To collections
----

. Noch ein test
[plantuml]
----
skinparam backgroundColor #EEEBDC
skinparam handwritten true

skinparam sequence {
    ArrowColor DeepSkyBlue
    ActorBorderColor DeepSkyBlue
    LifeLineBorderColor blue
    LifeLineBackgroundColor #A9DCDF
    ParticipantBorderColor DeepSkyBlue
    ParticipantBackgroundColor DodgerBlue
    ParticipantFontName Impact
    ParticipantFontSize 17
    ParticipantFontColor #A9DCDF
    ActorBackgroundColor aqua
    ActorFontColor DeepSkyBlue
    ActorFontSize 17
    ActorFontName Aapex
}

actor User
participant "First Class" as A
participant "Second Class" as B
participant "Last Class" as C

User -> A: DoWork
activate A

A -> B: Create Request
activate B

B -> C: DoWork
activate C
C --> B: WorkDone
destroy C

B --> A: Request Created
deactivate B

A --> User: Done
deactivate A

----
